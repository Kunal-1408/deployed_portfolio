generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

type BrandStats {
  impression   String?
  interactions String?
  reach        String?
}



type TextsClients {
  logoUrl String
}

type TextsHero {
  description String
  subtitle    String
  title       String
}

type TextsServicePages {
  branding       TextsServicePagesBranding
  design         TextsServicePagesDesign
  seo            TextsServicePagesSeo
  webDevelopment TextsServicePagesWebDevelopment
}

type TextsServicePagesBranding {
  carouselImages TextsServicePagesBrandingCarouselImages[]
  description    String
  whatWeDo       TextsServicePagesBrandingWhatWeDo
}

type TextsServicePagesBrandingCarouselImages {
  imageUrl String
}

type TextsServicePagesBrandingWhatWeDo {
  cards       TextsServicePagesBrandingWhatWeDoCards[]
  description String
}

type TextsServicePagesBrandingWhatWeDoCards {
  description String
  title       String
}

type TextsServicePagesDesign {
  carouselImages TextsServicePagesDesignCarouselImages[]
  description    String
  whatWeDo       TextsServicePagesDesignWhatWeDo
}

type TextsServicePagesDesignCarouselImages {
  imageUrl String
}

type TextsServicePagesDesignWhatWeDo {
  cards       TextsServicePagesDesignWhatWeDoCards[]
  description String
}

type TextsServicePagesDesignWhatWeDoCards {
  description String
  title       String
}

type TextsServicePagesSeo {
  carouselImages TextsServicePagesSeoCarouselImages[]
  description    String
  whatWeDo       TextsServicePagesSeoWhatWeDo
}

type TextsServicePagesSeoCarouselImages {
  imageUrl String
}

type TextsServicePagesSeoWhatWeDo {
  cards       TextsServicePagesSeoWhatWeDoCards[]
  description String
}

type TextsServicePagesSeoWhatWeDoCards {
  description String
  title       String
}

type TextsServicePagesWebDevelopment {
  carouselImages TextsServicePagesWebDevelopmentCarouselImages[]
  description    String
  whatWeDo       TextsServicePagesWebDevelopmentWhatWeDo
}

type TextsServicePagesWebDevelopmentCarouselImages {
  imageUrl String
}

type TextsServicePagesWebDevelopmentWhatWeDo {
  cards       TextsServicePagesWebDevelopmentWhatWeDoCards[]
  description String
}

type TextsServicePagesWebDevelopmentWhatWeDoCards {
  description String
  title       String
}

type TextsServices {
  description String
  imageUrl    String
  title       String
  src         String
}

type TextsWhyChooseUs {
  description String
  imageUrl    String
  title       String
}

type TextsContactUs {
  banner           TextsContactUsBanner
  contactInfoCards TextsContactUsContactInfoCards[]
  faqs             TextsContactUsFaqs[]
}

type TextsContactUsBanner {
  imageUrl String
}

type TextsContactUsContactInfoCards {
  heading     String
  description String
}

type TextsContactUsFaqs {
  question String
  answer   String
}

// New types for About Us page
type TextsAboutUs {
  title   String
  content TextsAboutUsContent
}

type TextsAboutUsContent {
  description String
  images      TextsAboutUsContentImages[]
}

type TextsAboutUsContentImages {
  imageUrl String
}

model Brand {
  id          String       @id @default(auto()) @map("_id") @db.ObjectId
  Brand       String
  Description String
  Logo        String
  Stats       BrandStats?
  banner      String
  archive             Boolean  @default(false)
  highlighted         Boolean  @default(false)
  tags        String[]
}



model Websites {
  id                  String   @id @default(auto()) @map("_id") @db.ObjectId
  Title               String
  Description         String?
  Status              String?
  URL                 String?
  Tags                String[]
  Backup_Date         String?  @map("Backup Date")
  Content_Update_Date String?  @map("Content Update Date")
  archive             Boolean  @default(false)
  highlighted         Boolean  @default(false)
  Images              String?
  Logo                String?
}

model clients {
  id          String  @id @default(auto()) @map("_id") @db.ObjectId
  Brand_Name  String  @map("Brand Name")
  Site_Type   String  @map("Site Type")
  URL         String?
  description String
  tags        Json
}

model credentials {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model design {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  Banner      String
  Brands      String
  Description String
  Logo        String
  Type        String
  URL                 String?
  archive             Boolean  @default(false)
  highlighted         Boolean  @default(false)
  tags        String[]
}

model queries {
  id         String @id @default(auto()) @map("_id") @db.ObjectId
  E_mail     String @map("E-mail")
  First_Name String @map("First Name")
  Last_Name  String @map("Last Name")
  Mobile     String
  Query      String
}

type SocialMediaSection {
  description String
  platforms   SocialPlatform[]
}

type SocialPlatform {
  name        String // e.g., "Instagram", "Twitter", "Facebook", "LinkedIn"
  url         String
  handle      String
  followers   Int?
  engagement  Float?
  description String?
}

type AnalyticsSection {
  description String
  metrics     Metric[]
}

type Metric {
  name        String // e.g., "Impressions", "Reach", "Engagement Rate"
  value       String
  change      Float? // Percentage change from previous period
  period      String? // e.g., "Last 30 days", "Year to date"
}

type CampaignSection {
  description String
  campaigns   Campaign[]
}

type Campaign {
  name        String
  description String
  startDate   DateTime?
  endDate     DateTime?
  status      String // e.g., "Active", "Completed", "Planned"
  results     String?
  images      String[]
}

model Social {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  title       String
  description String?
  clientName  String?
  
  // New flexible sections structure (stored as JSON)
  sections    Json?    @default("[]")
  
  // Tags for filtering and categorization
  tags        String[] @default([])
  
  // Status flags
  archive     Boolean  @default(false)
  highlighted Boolean  @default(false)
  
  // Legacy fields for backward compatibility
  Brand       String?
  Description String?
  Logo        String?
  URL         String[] @default([])
  banner      String?
  
  // Legacy section fields (can be gradually phased out)
  logoSection       Json? @default("{}")
  bannerSection     Json? @default("{}")
  socialMediaSection Json? @default("{}")
  analyticsSection  Json? @default("{}")
  campaignSection   Json? @default("{}")
  
  @@map("social")
}

model texts {
  id           String             @id @default(auto()) @map("_id") @db.ObjectId
  clients      TextsClients[]
  hero         TextsHero?
  servicePages TextsServicePages?
  services     TextsServices[]
  whyChooseUs  TextsWhyChooseUs[]
  contactUs    TextsContactUs?    // New field for Contact Us page
  aboutUs      TextsAboutUs[]     // New field for About Us page
}
model User {
  id       String @id @default(auto()) @map("_id") @db.ObjectId
  avatar   String
  email    String @unique
  password String
}

model Settings {
  id               String  @id @default(auto()) @map("_id") @db.ObjectId
  metaTitle        String
  metaKeyword      String
  metaDesc         String
  phone1           String
  phone2           String?
  email1           String
  email2           String?
  address          String?
  footerCopyright  String
  contactText      String
  maps             String?
  facebook         String?
  instagram        String?
  skype            String?
  linkedin         String?
  twitter          String?
  youtube          String?
  whatsapp         String?
  websiteLogoPath  String?
  footerLogoPath   String?
  faviconPath      String?
}


type LogoSection {
  logo        String
  description String
}

type BannerSection {
  description String
  banners     String[]
}

type StandeeSection {
  description String
  standees    String[]
}

type CardSection {
  description String
  card        String[] // Will contain exactly 2 strings [front, back]
}

type GoodiesSection {
  description String
  goodies     String[]
}

model Branding {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String
  clientName  String?
  sections    Json      // Store sections as a JSON field
  tags        String[]
  archive     Boolean   @default(false)
  highlighted Boolean   @default(false)
  createdAt   String
  updatedAt   String
}


enum ProjectStatus {
  DRAFT
  IN_PROGRESS
  COMPLETED
  ARCHIVED
}

model ProjectType {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  name     String
  tagTypes TagType[]

  @@map("project_types")
}

model TagType {
  id           String      @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  color        String
  tags         Tag[]
  projectType  ProjectType @relation(fields: [projectTypeId], references: [id], onDelete: Cascade)
  projectTypeId String      @db.ObjectId

  @@map("tag_types")
}

model Tag {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  color     String?
  tagType   TagType @relation(fields: [tagTypeId], references: [id], onDelete: Cascade)
  tagTypeId String  @db.ObjectId

  @@map("tags")
}

model ContactUs {
  id              String          @id @default(auto()) @map("_id") @db.ObjectId
  heroImageUrl    String
  formImageUrl    String
  contactInfoCards ContactInfoCard[]
  faqs            FAQ[]
}

type ContactInfoCard {
  icon            String
  title           String
  description     String
}

type FAQ {
  question        String
  answer          String
}
